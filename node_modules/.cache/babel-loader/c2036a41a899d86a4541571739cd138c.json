{"ast":null,"code":"var _jsxFileName = \"/Users/ivanbrown/git/react/myreads/src/BookSearch.js\",\n    _s = $RefreshSig$();\n\nimport { Link } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport BooksGrid from \"./BooksGrid\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BookSearch = ({\n  setShelf,\n  maxResults,\n  shelvedBooks\n}) => {\n  _s();\n\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState([]);\n  const bookDictionary = shelvedBooks && Object.assign({}, ...shelvedBooks.map(x => ({\n    [x.id]: x.shelf\n  }))) || [{}];\n\n  const search = async () => {\n    if (query.length < 1) return;\n    const res = await BooksAPI.search(query, maxResults);\n\n    if (res.error) {\n      console.debug(`booksApi.search(\"${query}\", ${maxResults}) failed: ${res.error}`);\n      setResults([]);\n    } else {\n      setResults(res.map(r => ({ ...r,\n        shelf: bookDictionary[r.id] || 'none'\n      })));\n    }\n  };\n\n  const handleChange = e => {\n    setQuery(e.target.value);\n  };\n\n  useEffect(() => {\n    if (query.length > 0) {\n      search();\n    } else {\n      setResults([]);\n    }\n  }, [query]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-books\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-bar\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        className: \"close-search\",\n        title: \"Go back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-books-input-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: query,\n          placeholder: \"Search by title, author, or ISBN\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-results\",\n      children: /*#__PURE__*/_jsxDEV(BooksGrid, {\n        books: results,\n        setShelf: setShelf\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BookSearch, \"nfFCkWxd9oyjBdRn730zz5KxriU=\");\n\n_c = BookSearch;\nexport default BookSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookSearch\");","map":{"version":3,"sources":["/Users/ivanbrown/git/react/myreads/src/BookSearch.js"],"names":["Link","useEffect","useState","BooksGrid","BooksAPI","BookSearch","setShelf","maxResults","shelvedBooks","query","setQuery","results","setResults","bookDictionary","Object","assign","map","x","id","shelf","search","length","res","error","console","debug","r","handleChange","e","target","value"],"mappings":";;;AAAA,SAASA,IAAT,QAAqB,kBAArB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAO,KAAKC,QAAZ,MAA0B,YAA1B;;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA,UAAX;AAAuBC,EAAAA;AAAvB,CAAD,KAA0C;AAAA;;AAC3D,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,EAAD,CAAtC;AAEA,QAAMW,cAAc,GAAGL,YAAY,IAAIM,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,GAAGP,YAAY,CAACQ,GAAb,CAAkBC,CAAD,KAAQ;AAAE,KAACA,CAAC,CAACC,EAAH,GAAQD,CAAC,CAACE;AAAZ,GAAR,CAAjB,CAArB,CAAhB,IAAwF,CAAC,EAAD,CAA/G;;AACA,QAAMC,MAAM,GAAG,YAAY;AACzB,QAAIX,KAAK,CAACY,MAAN,GAAe,CAAnB,EAAsB;AAEtB,UAAMC,GAAG,GAAG,MAAMlB,QAAQ,CAACgB,MAAT,CAAgBX,KAAhB,EAAuBF,UAAvB,CAAlB;;AAEA,QAAIe,GAAG,CAACC,KAAR,EAAe;AACbC,MAAAA,OAAO,CAACC,KAAR,CAAe,oBAAmBhB,KAAM,MAAKF,UAAW,aAAYe,GAAG,CAACC,KAAM,EAA9E;AACAX,MAAAA,UAAU,CAAC,EAAD,CAAV;AACD,KAHD,MAGO;AACLA,MAAAA,UAAU,CAACU,GAAG,CAACN,GAAJ,CAAQU,CAAC,KAAK,EAAE,GAAGA,CAAL;AAAQP,QAAAA,KAAK,EAAEN,cAAc,CAACa,CAAC,CAACR,EAAH,CAAd,IAAwB;AAAvC,OAAL,CAAT,CAAD,CAAV;AACD;AACF,GAXD;;AAaA,QAAMS,YAAY,GAAIC,CAAD,IAAO;AAC1BlB,IAAAA,QAAQ,CAACkB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR;AACD,GAFD;;AAIA7B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,KAAK,CAACY,MAAN,GAAe,CAAnB,EAAsB;AACpBD,MAAAA,MAAM;AACP,KAFD,MAGK;AACHR,MAAAA,UAAU,CAAC,EAAD,CAAV;AACD;AACF,GAPQ,EAON,CAACH,KAAD,CAPM,CAAT;AASA,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,GAAT;AAAa,QAAA,SAAS,EAAC,cAAvB;AAAsC,QAAA,KAAK,EAAC;AAA5C;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,4BAAf;AAAA,+BACE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,KAAK,EAAEA,KAFT;AAGE,UAAA,WAAW,EAAC,kCAHd;AAIE,UAAA,QAAQ,EAAEkB;AAJZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAYE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA,6BACE,QAAC,SAAD;AAAW,QAAA,KAAK,EAAEhB,OAAlB;AAA2B,QAAA,QAAQ,EAAEL;AAArC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CAhDD;;GAAMD,U;;KAAAA,U;AAkDN,eAAeA,UAAf","sourcesContent":["import { Link } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport BooksGrid from \"./BooksGrid\";\nimport * as BooksAPI from \"./BooksAPI\";\n\nconst BookSearch = ({setShelf, maxResults, shelvedBooks}) => {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState([]);\n\n  const bookDictionary = shelvedBooks && Object.assign({}, ...shelvedBooks.map((x) => ({ [x.id]: x.shelf }))) || [{}];\n  const search = async () => { \n    if (query.length < 1) return;\n\n    const res = await BooksAPI.search(query, maxResults); \n    \n    if (res.error) {\n      console.debug(`booksApi.search(\"${query}\", ${maxResults}) failed: ${res.error}`);\n      setResults([]);\n    } else {\n      setResults(res.map(r => ({ ...r, shelf: bookDictionary[r.id] || 'none'})));\n    }\n  };\n\n  const handleChange = (e) => {\n    setQuery(e.target.value);\n  };\n\n  useEffect(() => {\n    if (query.length > 0) {\n      search();\n    }\n    else {\n      setResults([]);\n    }\n  }, [query]);\n  \n  return (\n    <div className=\"search-books\">\n      <div className=\"search-books-bar\">\n        <Link to=\"/\" className=\"close-search\" title=\"Go back\" />\n        <div className=\"search-books-input-wrapper\">\n          <input\n            type=\"text\"\n            value={query}\n            placeholder=\"Search by title, author, or ISBN\"\n            onChange={handleChange}\n          />\n        </div>\n      </div>\n      <div className=\"search-books-results\">\n        <BooksGrid books={results} setShelf={setShelf}/>\n      </div>\n    </div>);\n}\n\nexport default BookSearch;\n"]},"metadata":{},"sourceType":"module"}